---
apiVersion: v1
kind: Namespace
metadata:
  name: configmap-7431
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-test-f61a3180-8242-43d0-be72-659de4f65498
  namespace: configmap-7431
data:
  data-1: value1
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: ~
  managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        "f:spec":
          "f:containers":
            "k:{\"name\":\"env-test\"}":
              ".": {}
              "f:command": {}
              "f:env":
                ".": {}
                "k:{\"name\":\"CONFIG_DATA_1\"}":
                  ".": {}
                  "f:name": {}
                  "f:valueFrom":
                    ".": {}
                    "f:configMapKeyRef": {}
              "f:image": {}
              "f:imagePullPolicy": {}
              "f:name": {}
              "f:resources": {}
              "f:terminationMessagePath": {}
              "f:terminationMessagePolicy": {}
          "f:dnsPolicy": {}
          "f:enableServiceLinks": {}
          "f:restartPolicy": {}
          "f:schedulerName": {}
          "f:securityContext": {}
          "f:terminationGracePeriodSeconds": {}
      manager: e2e.test
      operation: Update
      time: "2023-06-20T21:24:59Z"
  name: pod-configmaps-d11bf824-62d2-45b5-a372-042b7e615aae
  namespace: configmap-7431
  annotations:
    io.katacontainers.config.agent.policy: 
spec:
  containers:
    - command:
        - sh
      env:
        - name: CONFIG_DATA_1
          valueFrom:
            configMapKeyRef:
              key: data-1
              name: configmap-test-f61a3180-8242-43d0-be72-659de4f65498
      image: "registry.k8s.io/e2e-test-images/busybox:1.29-2"
      imagePullPolicy: IfNotPresent
      name: env-test
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access-q7g2m
          readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Never
  runtimeClassName: kata-cc
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
  volumes:
    - name: kube-api-access-q7g2m
      projected:
        defaultMode: 420
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
                - key: ca.crt
                  path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
status: {}
