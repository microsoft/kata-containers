---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-map2
data:
  file1.json: "{key1: value1, key2: value2, key123: value123, 321key: value321}\n"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ro-config-map2
data:
  file1.json: "{key1: foo}"
---
apiVersion: v1
kind: Pod
metadata:
  name: cm2
  annotations:
    io.katacontainers.config.agent.policy: 
spec:
  restartPolicy: Never
  runtimeClassName: kata-cc
  shareProcessNamespace: true
  containers:
    - name: busybox
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      securityContext:
        runAsUser: 123
      volumeMounts:
        - mountPath: /cm2
          name: cm2-volume
        - mountPath: /cm3
          name: cm2-volume-ro
          readOnly: true
      command:
        - /bin/sh
      args:
        - "-c"
        - while true; do echo hello; sleep 10; done
    - name: busybox2
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      securityContext:
        runAsUser: 321
      volumeMounts:
        - mountPath: /cm2
          name: cm2-volume
        - mountPath: /cm3
          name: cm2-volume-ro
          readOnly: true
      command:
        - /bin/sh
      args:
        - "-c"
        - while true; do echo hello; sleep 10; done
  volumes:
    - name: cm2-volume
      configMap:
        name: config-map2
        items:
          - key: file1.json
            path: my-keys
    - name: cm2-volume-ro
      configMap:
        name: ro-config-map2
        items:
          - key: file1.json
            path: ro-keys
