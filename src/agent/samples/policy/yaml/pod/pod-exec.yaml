---
apiVersion: v1
kind: Pod
metadata:
  name: exec-test
  labels:
    run: busybox
  annotations:
    io.katacontainers.config.agent.policy: 
spec:
  restartPolicy: Never
  runtimeClassName: kata-cc
  containers:
    - name: busybox
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.serviceAccountName
        - name: PROXY_CONFIG
          value: "{}\n"
        - name: ISTIO_META_POD_PORTS
          value: "[\n]"
        - name: ISTIO_META_APP_CONTAINERS
          value: serviceaclient
        - name: ISTIO_META_CLUSTER_ID
          value: Kubernetes
        - name: ISTIO_META_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
      securityContext:
        privileged: true
      command:
        - /bin/sh
      args:
        - "-c"
        - while true; do echo $(ISTIO_META_CLUSTER_ID); echo $(ISTIO_META_NODE_NAME); sleep 10; done
      livenessProbe:
        exec:
          command:
            - echo
            - "${ISTIO_META_APP_CONTAINERS}"
        failureThreshold: 1
        periodSeconds: 5
        timeoutSeconds: 10
      readinessProbe:
        exec:
          command:
            - echo
            - "Ready ${POD_IP}!"
        failureThreshold: 1
        periodSeconds: 5
        timeoutSeconds: 10
      startupProbe:
        exec:
          command:
            - echo
            - "${ISTIO_META_NODE_NAME} startup"
        failureThreshold: 1
        periodSeconds: 5
        timeoutSeconds: 10
