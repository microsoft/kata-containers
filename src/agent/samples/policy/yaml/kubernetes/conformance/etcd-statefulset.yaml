---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: etcd
  labels:
    app: etcd
spec:
  serviceName: etcd
  replicas: 3
  selector:
    matchLabels:
      app: etcd
  template:
    metadata:
      name: etcd
      labels:
        app: etcd
      annotations:
        io.katacontainers.config.agent.policy: 
    spec:
      runtimeClassName: kata-cc
      containers:
        - name: etcd
          image: "registry.k8s.io/etcd:3.2.24"
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /var/run/etcd
              name: datadir
          env:
            - name: INITIAL_CLUSTER_SIZE
              value: "3"
            - name: SET_NAME
              value: etcd
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          ports:
            - containerPort: 2380
              name: peer
            - containerPort: 2379
              name: client
          command:
            - /bin/sh
            - "-ec"
            - "HOSTNAME=$(hostname)\n\n# store member id into PVC for later member replacement\ncollect_member() {\n    while ! etcdctl member list &>/dev/null; do sleep 1; done\n    etcdctl member list | grep http://${HOSTNAME}.${SET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1 > /var/run/etcd/member_id\n    exit 0\n}\n\neps() {\n    EPS=\"\"\n    for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do\n        EPS=\"${EPS}${EPS:+,}http://${SET_NAME}-${i}.${SET_NAME}:2379\"\n    done\n    echo ${EPS}\n}\n\nmember_hash() {\n    etcdctl member list | grep http://${HOSTNAME}.${SET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1\n}\n\n# re-joining after failure?\nif [ -e /var/run/etcd/default.etcd ]; then\n    echo \"Re-joining etcd member\"\n    member_id=$(cat /var/run/etcd/member_id)\n\n    # re-join member\n    ETCDCTL_ENDPOINT=$(eps) etcdctl member update ${member_id} http://${HOSTNAME}.${SET_NAME}:2380\n    exec etcd --name ${HOSTNAME} \\\n        --listen-peer-urls http://${HOSTNAME}.${SET_NAME}:2380 \\\n        --listen-client-urls http://${HOSTNAME}.${SET_NAME}:2379,http://127.0.0.1:2379 \\\n        --advertise-client-urls http://${HOSTNAME}.${SET_NAME}:2379 \\\n        --data-dir /var/run/etcd/default.etcd\nfi\n\n# etcd-SET_ID\nSET_ID=${HOSTNAME:5:${#HOSTNAME}}\n\n# adding a new member to existing cluster (assuming all initial pods are available)\nif [ \"${SET_ID}\" -ge ${INITIAL_CLUSTER_SIZE} ]; then\n    export ETCDCTL_ENDPOINT=$(eps)\n\n    # member already added?\n    MEMBER_HASH=$(member_hash)\n    if [ -n \"${MEMBER_HASH}\" ]; then\n        # the member hash exists but for some reason etcd failed\n        # as the datadir has not be created, we can remove the member\n        # and retrieve new hash\n        etcdctl member remove ${MEMBER_HASH}\n    fi\n\n    echo \"Adding new member\"\n    etcdctl member add ${HOSTNAME} http://${HOSTNAME}.${SET_NAME}:2380 | grep \"^ETCD_\" > /var/run/etcd/new_member_envs\n\n    if [ $? -ne 0 ]; then\n        echo \"Exiting\"\n        rm -f /var/run/etcd/new_member_envs\n        exit 1\n    fi\n\n    cat /var/run/etcd/new_member_envs\n    source /var/run/etcd/new_member_envs\n\n    collect_member &\n\n    exec etcd --name ${HOSTNAME} \\\n        --listen-peer-urls http://${HOSTNAME}.${SET_NAME}:2380 \\\n        --listen-client-urls http://${HOSTNAME}.${SET_NAME}:2379,http://127.0.0.1:2379 \\\n        --advertise-client-urls http://${HOSTNAME}.${SET_NAME}:2379 \\\n        --data-dir /var/run/etcd/default.etcd \\\n        --initial-advertise-peer-urls http://${HOSTNAME}.${SET_NAME}:2380 \\\n        --initial-cluster ${ETCD_INITIAL_CLUSTER} \\\n        --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE}\nfi\n\nfor i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do\n    while true; do\n        echo \"Waiting for ${SET_NAME}-${i}.${SET_NAME} to come up\"\n        ping -W 1 -c 1 ${SET_NAME}-${i}.${SET_NAME} > /dev/null && break\n        sleep 1s\n    done\ndone\n\nPEERS=\"\"\nfor i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do\n    PEERS=\"${PEERS}${PEERS:+,}${SET_NAME}-${i}=http://${SET_NAME}-${i}.${SET_NAME}:2380\"\ndone\n\ncollect_member &\n\n# join member\nexec etcd --name ${HOSTNAME} \\\n    --initial-advertise-peer-urls http://${HOSTNAME}.${SET_NAME}:2380 \\\n    --listen-peer-urls http://${HOSTNAME}.${SET_NAME}:2380 \\\n    --listen-client-urls http://${HOSTNAME}.${SET_NAME}:2379,http://127.0.0.1:2379 \\\n    --advertise-client-urls http://${HOSTNAME}.${SET_NAME}:2379 \\\n    --initial-cluster-token etcd-cluster-1 \\\n    --initial-cluster ${PEERS} \\\n    --initial-cluster-state new \\\n    --data-dir /var/run/etcd/default.etcd\n"
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - "-ec"
                  - "EPS=\"\"\nfor i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do\n    EPS=\"${EPS}${EPS:+,}http://${SET_NAME}-${i}.${SET_NAME}:2379\"\ndone\n\nHOSTNAME=$(hostname)\n\nmember_hash() {\n    etcdctl member list | grep http://${HOSTNAME}.${SET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1\n}\n\necho \"Removing ${HOSTNAME} from etcd cluster\"\n\nETCDCTL_ENDPOINT=${EPS} etcdctl member remove $(member_hash)\nif [ $? -eq 0 ]; then\n    # Remove everything otherwise the cluster will no longer scale-up\n    rm -rf /var/run/etcd/*\nfi\n"
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
