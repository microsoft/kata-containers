---
apiVersion: v1
kind: Namespace
metadata:
  name: conformance
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: conformance
  name: conformance-serviceaccount
  namespace: conformance
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: conformance
  name: conformance-serviceaccount-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: conformance-serviceaccount
subjects:
  - kind: ServiceAccount
    name: conformance-serviceaccount
    namespace: conformance
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: conformance
  name: conformance-serviceaccount
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
  - nonResourceURLs:
      - /metrics
      - /logs
      - /logs/*
    verbs:
      - get
---
apiVersion: v1
kind: Pod
metadata:
  name: e2e-conformance-test
  annotations:
    io.katacontainers.config.agent.policy: 
  namespace: conformance
spec:
  restartPolicy: Never
  runtimeClassName: kata-cc
  containers:
    - name: busy
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - mountPath: /tmp/results
          name: output-volume
          readOnly: true
      env:
        - name: E2E_FOCUS
          value: "\\[Conformance\\]"
        - name: E2E_SKIP
          value: ""
        - name: E2E_PROVIDER
          value: skeleton
        - name: E2E_PARALLEL
          value: "false"
        - name: E2E_VERBOSITY
          value: "4"
  volumes:
    - name: output-volume
      hostPath:
        path: /tmp/results
  serviceAccountName: conformance-serviceaccount
