---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cockroachdb
spec:
  serviceName: cockroachdb
  replicas: 3
  selector:
    matchLabels:
      app: cockroachdb
  template:
    metadata:
      labels:
        app: cockroachdb
      annotations:
    spec:
      runtimeClassName: kata-cc
      initContainers:
        - name: bootstrap
          image: "marinerconfpodstest.azurecr.io/cockroachdb/cockroach-k8s-init:0.1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /cockroach/cockroach-data
              name: datadir
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - "-on-start=/on-start.sh"
            - "-service=cockroachdb"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - cockroachdb
                topologyKey: kubernetes.io/hostname
      containers:
        - name: cockroachdb
          image: "marinerconfpodstest.azurecr.io/cockroachdb/cockroach:v1.0"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /cockroach/cockroach-data
              name: datadir
          ports:
            - containerPort: 26257
              name: grpc
            - containerPort: 8080
              name: http
          command:
            - /bin/bash
            - "-ecx"
            - "# The use of qualified `hostname -f` is crucial:\n# Other nodes aren't able to look up the unqualified hostname.\nCRARGS=(\"start\" \"--logtostderr\" \"--insecure\" \"--host\" \"$(hostname -f)\" \"--http-host\" \"0.0.0.0\")\n# We only want to initialize a new cluster (by omitting the join flag)\n# if we're sure that we're the first node (i.e. index 0) and that\n# there aren't any other nodes running as part of the cluster that\n# this is supposed to be a part of (which indicates that a cluster\n# already exists and we should make sure not to create a new one).\n# It's fine to run without --join on a restart if there aren't any\n# other nodes.\nif [ ! \"$(hostname)\" == \"cockroachdb-0\" ] || \\\n   [ -e \"/cockroach/cockroach-data/cluster_exists_marker\" ]\nthen\n  # We don't join cockroachdb in order to avoid a node attempting\n  # to join itself, which currently doesn't work\n  # (https://github.com/cockroachdb/cockroach/issues/9625).\n  CRARGS+=(\"--join\" \"cockroachdb-0.cockroachdb,cockroachdb-1.cockroachdb,cockroachdb-2.cockroachdb\")\nfi\nexec /cockroach/cockroach ${CRARGS[*]}\n"
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: datadir
      terminationGracePeriodSeconds: 60
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
