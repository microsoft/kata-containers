// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: openvmmservice.proto

package openvmmservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VM_CreateVM_FullMethodName       = "/openvmmservice.VM/CreateVM"
	VM_TeardownVM_FullMethodName     = "/openvmmservice.VM/TeardownVM"
	VM_PauseVM_FullMethodName        = "/openvmmservice.VM/PauseVM"
	VM_ResumeVM_FullMethodName       = "/openvmmservice.VM/ResumeVM"
	VM_WaitVM_FullMethodName         = "/openvmmservice.VM/WaitVM"
	VM_CapabilitiesVM_FullMethodName = "/openvmmservice.VM/CapabilitiesVM"
	VM_PropertiesVM_FullMethodName   = "/openvmmservice.VM/PropertiesVM"
	VM_ModifyResource_FullMethodName = "/openvmmservice.VM/ModifyResource"
	VM_Quit_FullMethodName           = "/openvmmservice.VM/Quit"
)

// VMClient is the client API for VM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMClient interface {
	// CreateVM will create the virtual machine with the configuration in the
	// CreateVMRequest. The virtual machine will be in a paused state power wise
	// after CreateVM. ResumeVM can be called to transition the VM into a running state.
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// TeardownVM will release all associated resources from the VM and unblock the WaitVM call.
	TeardownVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// PauseVM will, if the virtual machine power state is in a running state, transition
	// the state to paused. This is the same state power wise that the VM should be in after
	// an initial CreateVM call.
	PauseVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ResumeVM is used to transition a vm to a running state. This can be used to resume a VM that
	// has had PauseVM called on it, or to start a VM that was created with CreateVM.
	ResumeVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// WaitVM will block until the VM is either in a halted state or has had all of it's resources freed
	// via TeardownVM.
	WaitVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// CapabilitiesVM will return what capabilities the virtstack supports. This includes
	// what guest operating systems are supported, what resources are supported, and if hot
	// add/hot remove of a resource is supported.
	CapabilitiesVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CapabilitiesVMResponse, error)
	// PropertiesVM will take in a list of properties that the virtstack will return
	// statistics for (memory, processors).
	PropertiesVM(ctx context.Context, in *PropertiesVMRequest, opts ...grpc.CallOption) (*PropertiesVMResponse, error)
	// ModifyResource is a generic call to modify (add/remove/update) resources for a VM.
	// This includes things such as block devices, network adapters, and pci devices.
	ModifyResource(ctx context.Context, in *ModifyResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Quit will shutdown the process hosting the ttrpc server.
	Quit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type vMClient struct {
	cc grpc.ClientConnInterface
}

func NewVMClient(cc grpc.ClientConnInterface) VMClient {
	return &vMClient{cc}
}

func (c *vMClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VM_CreateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) TeardownVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VM_TeardownVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) PauseVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VM_PauseVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ResumeVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VM_ResumeVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) WaitVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VM_WaitVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) CapabilitiesVM(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CapabilitiesVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapabilitiesVMResponse)
	err := c.cc.Invoke(ctx, VM_CapabilitiesVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) PropertiesVM(ctx context.Context, in *PropertiesVMRequest, opts ...grpc.CallOption) (*PropertiesVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PropertiesVMResponse)
	err := c.cc.Invoke(ctx, VM_PropertiesVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ModifyResource(ctx context.Context, in *ModifyResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VM_ModifyResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) Quit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, VM_Quit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServer is the server API for VM service.
// All implementations must embed UnimplementedVMServer
// for forward compatibility.
type VMServer interface {
	// CreateVM will create the virtual machine with the configuration in the
	// CreateVMRequest. The virtual machine will be in a paused state power wise
	// after CreateVM. ResumeVM can be called to transition the VM into a running state.
	CreateVM(context.Context, *CreateVMRequest) (*empty.Empty, error)
	// TeardownVM will release all associated resources from the VM and unblock the WaitVM call.
	TeardownVM(context.Context, *empty.Empty) (*empty.Empty, error)
	// PauseVM will, if the virtual machine power state is in a running state, transition
	// the state to paused. This is the same state power wise that the VM should be in after
	// an initial CreateVM call.
	PauseVM(context.Context, *empty.Empty) (*empty.Empty, error)
	// ResumeVM is used to transition a vm to a running state. This can be used to resume a VM that
	// has had PauseVM called on it, or to start a VM that was created with CreateVM.
	ResumeVM(context.Context, *empty.Empty) (*empty.Empty, error)
	// WaitVM will block until the VM is either in a halted state or has had all of it's resources freed
	// via TeardownVM.
	WaitVM(context.Context, *empty.Empty) (*empty.Empty, error)
	// CapabilitiesVM will return what capabilities the virtstack supports. This includes
	// what guest operating systems are supported, what resources are supported, and if hot
	// add/hot remove of a resource is supported.
	CapabilitiesVM(context.Context, *empty.Empty) (*CapabilitiesVMResponse, error)
	// PropertiesVM will take in a list of properties that the virtstack will return
	// statistics for (memory, processors).
	PropertiesVM(context.Context, *PropertiesVMRequest) (*PropertiesVMResponse, error)
	// ModifyResource is a generic call to modify (add/remove/update) resources for a VM.
	// This includes things such as block devices, network adapters, and pci devices.
	ModifyResource(context.Context, *ModifyResourceRequest) (*empty.Empty, error)
	// Quit will shutdown the process hosting the ttrpc server.
	Quit(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedVMServer()
}

// UnimplementedVMServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMServer struct{}

func (UnimplementedVMServer) CreateVM(context.Context, *CreateVMRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedVMServer) TeardownVM(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeardownVM not implemented")
}
func (UnimplementedVMServer) PauseVM(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseVM not implemented")
}
func (UnimplementedVMServer) ResumeVM(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVM not implemented")
}
func (UnimplementedVMServer) WaitVM(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitVM not implemented")
}
func (UnimplementedVMServer) CapabilitiesVM(context.Context, *empty.Empty) (*CapabilitiesVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapabilitiesVM not implemented")
}
func (UnimplementedVMServer) PropertiesVM(context.Context, *PropertiesVMRequest) (*PropertiesVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertiesVM not implemented")
}
func (UnimplementedVMServer) ModifyResource(context.Context, *ModifyResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyResource not implemented")
}
func (UnimplementedVMServer) Quit(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedVMServer) mustEmbedUnimplementedVMServer() {}
func (UnimplementedVMServer) testEmbeddedByValue()            {}

// UnsafeVMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMServer will
// result in compilation errors.
type UnsafeVMServer interface {
	mustEmbedUnimplementedVMServer()
}

func RegisterVMServer(s grpc.ServiceRegistrar, srv VMServer) {
	// If the following call pancis, it indicates UnimplementedVMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VM_ServiceDesc, srv)
}

func _VM_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_CreateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_TeardownVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).TeardownVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_TeardownVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).TeardownVM(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_PauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).PauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_PauseVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).PauseVM(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ResumeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ResumeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_ResumeVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ResumeVM(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_WaitVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).WaitVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_WaitVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).WaitVM(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_CapabilitiesVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).CapabilitiesVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_CapabilitiesVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).CapabilitiesVM(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_PropertiesVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertiesVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).PropertiesVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_PropertiesVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).PropertiesVM(ctx, req.(*PropertiesVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ModifyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ModifyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_ModifyResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ModifyResource(ctx, req.(*ModifyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VM_Quit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).Quit(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VM_ServiceDesc is the grpc.ServiceDesc for VM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openvmmservice.VM",
	HandlerType: (*VMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VM_CreateVM_Handler,
		},
		{
			MethodName: "TeardownVM",
			Handler:    _VM_TeardownVM_Handler,
		},
		{
			MethodName: "PauseVM",
			Handler:    _VM_PauseVM_Handler,
		},
		{
			MethodName: "ResumeVM",
			Handler:    _VM_ResumeVM_Handler,
		},
		{
			MethodName: "WaitVM",
			Handler:    _VM_WaitVM_Handler,
		},
		{
			MethodName: "CapabilitiesVM",
			Handler:    _VM_CapabilitiesVM_Handler,
		},
		{
			MethodName: "PropertiesVM",
			Handler:    _VM_PropertiesVM_Handler,
		},
		{
			MethodName: "ModifyResource",
			Handler:    _VM_ModifyResource_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _VM_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openvmmservice.proto",
}
