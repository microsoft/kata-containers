// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: openvmmservice.proto

package openvmmservice

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Modify existing VM request/response
type ModifyType int32

const (
	ModifyType_ADD    ModifyType = 0
	ModifyType_REMOVE ModifyType = 1
	ModifyType_UPDATE ModifyType = 2
)

// Enum value maps for ModifyType.
var (
	ModifyType_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
		2: "UPDATE",
	}
	ModifyType_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
		"UPDATE": 2,
	}
)

func (x ModifyType) Enum() *ModifyType {
	p := new(ModifyType)
	*p = x
	return p
}

func (x ModifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_openvmmservice_proto_enumTypes[0].Descriptor()
}

func (ModifyType) Type() protoreflect.EnumType {
	return &file_openvmmservice_proto_enumTypes[0]
}

func (x ModifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModifyType.Descriptor instead.
func (ModifyType) EnumDescriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{0}
}

type DiskType int32

const (
	DiskType_SCSI_DISK_TYPE_VHD1     DiskType = 0
	DiskType_SCSI_DISK_TYPE_VHDX     DiskType = 1
	DiskType_SCSI_DISK_TYPE_PHYSICAL DiskType = 2
)

// Enum value maps for DiskType.
var (
	DiskType_name = map[int32]string{
		0: "SCSI_DISK_TYPE_VHD1",
		1: "SCSI_DISK_TYPE_VHDX",
		2: "SCSI_DISK_TYPE_PHYSICAL",
	}
	DiskType_value = map[string]int32{
		"SCSI_DISK_TYPE_VHD1":     0,
		"SCSI_DISK_TYPE_VHDX":     1,
		"SCSI_DISK_TYPE_PHYSICAL": 2,
	}
)

func (x DiskType) Enum() *DiskType {
	p := new(DiskType)
	*p = x
	return p
}

func (x DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_openvmmservice_proto_enumTypes[1].Descriptor()
}

func (DiskType) Type() protoreflect.EnumType {
	return &file_openvmmservice_proto_enumTypes[1]
}

func (x DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskType.Descriptor instead.
func (DiskType) EnumDescriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{1}
}

type PropertiesVMRequest_PropertiesType int32

const (
	PropertiesVMRequest_Memory    PropertiesVMRequest_PropertiesType = 0
	PropertiesVMRequest_Processor PropertiesVMRequest_PropertiesType = 1
)

// Enum value maps for PropertiesVMRequest_PropertiesType.
var (
	PropertiesVMRequest_PropertiesType_name = map[int32]string{
		0: "Memory",
		1: "Processor",
	}
	PropertiesVMRequest_PropertiesType_value = map[string]int32{
		"Memory":    0,
		"Processor": 1,
	}
)

func (x PropertiesVMRequest_PropertiesType) Enum() *PropertiesVMRequest_PropertiesType {
	p := new(PropertiesVMRequest_PropertiesType)
	*p = x
	return p
}

func (x PropertiesVMRequest_PropertiesType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertiesVMRequest_PropertiesType) Descriptor() protoreflect.EnumDescriptor {
	return file_openvmmservice_proto_enumTypes[2].Descriptor()
}

func (PropertiesVMRequest_PropertiesType) Type() protoreflect.EnumType {
	return &file_openvmmservice_proto_enumTypes[2]
}

func (x PropertiesVMRequest_PropertiesType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertiesVMRequest_PropertiesType.Descriptor instead.
func (PropertiesVMRequest_PropertiesType) EnumDescriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{12, 0}
}

type CapabilitiesVMResponse_Resource int32

const (
	CapabilitiesVMResponse_Vpmem     CapabilitiesVMResponse_Resource = 0
	CapabilitiesVMResponse_Scsi      CapabilitiesVMResponse_Resource = 1
	CapabilitiesVMResponse_Vpci      CapabilitiesVMResponse_Resource = 2
	CapabilitiesVMResponse_Plan9     CapabilitiesVMResponse_Resource = 3
	CapabilitiesVMResponse_VMNic     CapabilitiesVMResponse_Resource = 4
	CapabilitiesVMResponse_Memory    CapabilitiesVMResponse_Resource = 5
	CapabilitiesVMResponse_Processor CapabilitiesVMResponse_Resource = 6
)

// Enum value maps for CapabilitiesVMResponse_Resource.
var (
	CapabilitiesVMResponse_Resource_name = map[int32]string{
		0: "Vpmem",
		1: "Scsi",
		2: "Vpci",
		3: "Plan9",
		4: "VMNic",
		5: "Memory",
		6: "Processor",
	}
	CapabilitiesVMResponse_Resource_value = map[string]int32{
		"Vpmem":     0,
		"Scsi":      1,
		"Vpci":      2,
		"Plan9":     3,
		"VMNic":     4,
		"Memory":    5,
		"Processor": 6,
	}
)

func (x CapabilitiesVMResponse_Resource) Enum() *CapabilitiesVMResponse_Resource {
	p := new(CapabilitiesVMResponse_Resource)
	*p = x
	return p
}

func (x CapabilitiesVMResponse_Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilitiesVMResponse_Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_openvmmservice_proto_enumTypes[3].Descriptor()
}

func (CapabilitiesVMResponse_Resource) Type() protoreflect.EnumType {
	return &file_openvmmservice_proto_enumTypes[3]
}

func (x CapabilitiesVMResponse_Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilitiesVMResponse_Resource.Descriptor instead.
func (CapabilitiesVMResponse_Resource) EnumDescriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{14, 0}
}

type CapabilitiesVMResponse_SupportedGuestOS int32

const (
	CapabilitiesVMResponse_Windows CapabilitiesVMResponse_SupportedGuestOS = 0
	CapabilitiesVMResponse_Linux   CapabilitiesVMResponse_SupportedGuestOS = 1
)

// Enum value maps for CapabilitiesVMResponse_SupportedGuestOS.
var (
	CapabilitiesVMResponse_SupportedGuestOS_name = map[int32]string{
		0: "Windows",
		1: "Linux",
	}
	CapabilitiesVMResponse_SupportedGuestOS_value = map[string]int32{
		"Windows": 0,
		"Linux":   1,
	}
)

func (x CapabilitiesVMResponse_SupportedGuestOS) Enum() *CapabilitiesVMResponse_SupportedGuestOS {
	p := new(CapabilitiesVMResponse_SupportedGuestOS)
	*p = x
	return p
}

func (x CapabilitiesVMResponse_SupportedGuestOS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilitiesVMResponse_SupportedGuestOS) Descriptor() protoreflect.EnumDescriptor {
	return file_openvmmservice_proto_enumTypes[4].Descriptor()
}

func (CapabilitiesVMResponse_SupportedGuestOS) Type() protoreflect.EnumType {
	return &file_openvmmservice_proto_enumTypes[4]
}

func (x CapabilitiesVMResponse_SupportedGuestOS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilitiesVMResponse_SupportedGuestOS.Descriptor instead.
func (CapabilitiesVMResponse_SupportedGuestOS) EnumDescriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{14, 1}
}

// VM lifecycle request/response
type DirectBoot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KernelPath    string                 `protobuf:"bytes,1,opt,name=kernel_path,json=kernelPath,proto3" json:"kernel_path,omitempty"`
	InitrdPath    string                 `protobuf:"bytes,2,opt,name=initrd_path,json=initrdPath,proto3" json:"initrd_path,omitempty"`
	KernelCmdline string                 `protobuf:"bytes,3,opt,name=kernel_cmdline,json=kernelCmdline,proto3" json:"kernel_cmdline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectBoot) Reset() {
	*x = DirectBoot{}
	mi := &file_openvmmservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectBoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectBoot) ProtoMessage() {}

func (x *DirectBoot) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectBoot.ProtoReflect.Descriptor instead.
func (*DirectBoot) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{0}
}

func (x *DirectBoot) GetKernelPath() string {
	if x != nil {
		return x.KernelPath
	}
	return ""
}

func (x *DirectBoot) GetInitrdPath() string {
	if x != nil {
		return x.InitrdPath
	}
	return ""
}

func (x *DirectBoot) GetKernelCmdline() string {
	if x != nil {
		return x.KernelCmdline
	}
	return ""
}

type UEFI struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	FirmwarePath string                 `protobuf:"bytes,1,opt,name=firmware_path,json=firmwarePath,proto3" json:"firmware_path,omitempty"`
	DevicePath   string                 `protobuf:"bytes,2,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
	// Optional data to include for uefi boot. For Linux this could be used as the kernel
	// commandline.
	OptionalData  string `protobuf:"bytes,3,opt,name=optional_data,json=optionalData,proto3" json:"optional_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UEFI) Reset() {
	*x = UEFI{}
	mi := &file_openvmmservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEFI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEFI) ProtoMessage() {}

func (x *UEFI) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEFI.ProtoReflect.Descriptor instead.
func (*UEFI) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{1}
}

func (x *UEFI) GetFirmwarePath() string {
	if x != nil {
		return x.FirmwarePath
	}
	return ""
}

func (x *UEFI) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

func (x *UEFI) GetOptionalData() string {
	if x != nil {
		return x.OptionalData
	}
	return ""
}

type MemoryConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MemoryMb         uint64                 `protobuf:"varint,1,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	AllowOvercommit  bool                   `protobuf:"varint,2,opt,name=allow_overcommit,json=allowOvercommit,proto3" json:"allow_overcommit,omitempty"`
	DeferredCommit   bool                   `protobuf:"varint,3,opt,name=deferred_commit,json=deferredCommit,proto3" json:"deferred_commit,omitempty"`
	HotHint          bool                   `protobuf:"varint,4,opt,name=hot_hint,json=hotHint,proto3" json:"hot_hint,omitempty"`
	ColdHint         bool                   `protobuf:"varint,5,opt,name=cold_hint,json=coldHint,proto3" json:"cold_hint,omitempty"`
	ColdDiscardHint  bool                   `protobuf:"varint,6,opt,name=cold_discard_hint,json=coldDiscardHint,proto3" json:"cold_discard_hint,omitempty"`
	LowMmioGapInMb   uint64                 `protobuf:"varint,7,opt,name=low_mmio_gap_in_mb,json=lowMmioGapInMb,proto3" json:"low_mmio_gap_in_mb,omitempty"`
	HighMmioBaseInMb uint64                 `protobuf:"varint,8,opt,name=high_mmio_base_in_mb,json=highMmioBaseInMb,proto3" json:"high_mmio_base_in_mb,omitempty"`
	HighMmioGapInMb  uint64                 `protobuf:"varint,9,opt,name=high_mmio_gap_in_mb,json=highMmioGapInMb,proto3" json:"high_mmio_gap_in_mb,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MemoryConfig) Reset() {
	*x = MemoryConfig{}
	mi := &file_openvmmservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryConfig) ProtoMessage() {}

func (x *MemoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryConfig.ProtoReflect.Descriptor instead.
func (*MemoryConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{2}
}

func (x *MemoryConfig) GetMemoryMb() uint64 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *MemoryConfig) GetAllowOvercommit() bool {
	if x != nil {
		return x.AllowOvercommit
	}
	return false
}

func (x *MemoryConfig) GetDeferredCommit() bool {
	if x != nil {
		return x.DeferredCommit
	}
	return false
}

func (x *MemoryConfig) GetHotHint() bool {
	if x != nil {
		return x.HotHint
	}
	return false
}

func (x *MemoryConfig) GetColdHint() bool {
	if x != nil {
		return x.ColdHint
	}
	return false
}

func (x *MemoryConfig) GetColdDiscardHint() bool {
	if x != nil {
		return x.ColdDiscardHint
	}
	return false
}

func (x *MemoryConfig) GetLowMmioGapInMb() uint64 {
	if x != nil {
		return x.LowMmioGapInMb
	}
	return 0
}

func (x *MemoryConfig) GetHighMmioBaseInMb() uint64 {
	if x != nil {
		return x.HighMmioBaseInMb
	}
	return 0
}

func (x *MemoryConfig) GetHighMmioGapInMb() uint64 {
	if x != nil {
		return x.HighMmioGapInMb
	}
	return 0
}

type ProcessorConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProcessorCount  uint32                 `protobuf:"varint,1,opt,name=processor_count,json=processorCount,proto3" json:"processor_count,omitempty"`
	ProcessorWeight uint32                 `protobuf:"varint,2,opt,name=processor_weight,json=processorWeight,proto3" json:"processor_weight,omitempty"`
	ProcessorLimit  uint32                 `protobuf:"varint,3,opt,name=processor_limit,json=processorLimit,proto3" json:"processor_limit,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProcessorConfig) Reset() {
	*x = ProcessorConfig{}
	mi := &file_openvmmservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorConfig) ProtoMessage() {}

func (x *ProcessorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorConfig.ProtoReflect.Descriptor instead.
func (*ProcessorConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessorConfig) GetProcessorCount() uint32 {
	if x != nil {
		return x.ProcessorCount
	}
	return 0
}

func (x *ProcessorConfig) GetProcessorWeight() uint32 {
	if x != nil {
		return x.ProcessorWeight
	}
	return 0
}

func (x *ProcessorConfig) GetProcessorLimit() uint32 {
	if x != nil {
		return x.ProcessorLimit
	}
	return 0
}

type DevicesConfig struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ScsiDisks  []*SCSIDisk            `protobuf:"bytes,1,rep,name=scsi_disks,json=scsiDisks,proto3" json:"scsi_disks,omitempty"`
	VpmemDisks []*VPMEMDisk           `protobuf:"bytes,2,rep,name=vpmem_disks,json=vpmemDisks,proto3" json:"vpmem_disks,omitempty"`
	NicConfig  []*NICConfig           `protobuf:"bytes,3,rep,name=nic_config,json=nicConfig,proto3" json:"nic_config,omitempty"`
	// When we know what information we need to assign a pci device on Linux,
	// have a oneof here named PCIDevice with WindowsPCIDevice and LinuxPCIDevice
	// housed.
	WindowsDevice  []*WindowsPCIDevice `protobuf:"bytes,4,rep,name=windows_device,json=windowsDevice,proto3" json:"windows_device,omitempty"`
	VirtiofsConfig []*VirtioFSConfig   `protobuf:"bytes,5,rep,name=virtiofs_config,json=virtiofsConfig,proto3" json:"virtiofs_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DevicesConfig) Reset() {
	*x = DevicesConfig{}
	mi := &file_openvmmservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesConfig) ProtoMessage() {}

func (x *DevicesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesConfig.ProtoReflect.Descriptor instead.
func (*DevicesConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{4}
}

func (x *DevicesConfig) GetScsiDisks() []*SCSIDisk {
	if x != nil {
		return x.ScsiDisks
	}
	return nil
}

func (x *DevicesConfig) GetVpmemDisks() []*VPMEMDisk {
	if x != nil {
		return x.VpmemDisks
	}
	return nil
}

func (x *DevicesConfig) GetNicConfig() []*NICConfig {
	if x != nil {
		return x.NicConfig
	}
	return nil
}

func (x *DevicesConfig) GetWindowsDevice() []*WindowsPCIDevice {
	if x != nil {
		return x.WindowsDevice
	}
	return nil
}

func (x *DevicesConfig) GetVirtiofsConfig() []*VirtioFSConfig {
	if x != nil {
		return x.VirtiofsConfig
	}
	return nil
}

type VMConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MemoryConfig    *MemoryConfig          `protobuf:"bytes,1,opt,name=memory_config,json=memoryConfig,proto3" json:"memory_config,omitempty"`
	ProcessorConfig *ProcessorConfig       `protobuf:"bytes,2,opt,name=processor_config,json=processorConfig,proto3" json:"processor_config,omitempty"`
	DevicesConfig   *DevicesConfig         `protobuf:"bytes,3,opt,name=devices_config,json=devicesConfig,proto3" json:"devices_config,omitempty"`
	SerialConfig    *SerialConfig          `protobuf:"bytes,4,opt,name=serial_config,json=serialConfig,proto3" json:"serial_config,omitempty"`
	// Types that are valid to be assigned to BootConfig:
	//
	//	*VMConfig_DirectBoot
	//	*VMConfig_Uefi
	BootConfig     isVMConfig_BootConfig `protobuf_oneof:"BootConfig"`
	WindowsOptions *WindowsOptions       `protobuf:"bytes,7,opt,name=windows_options,json=windowsOptions,proto3" json:"windows_options,omitempty"`
	// Optional k:v extra data. Up to the virtstack for how to interpret this.
	ExtraData      map[string]string `protobuf:"bytes,8,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HvsocketConfig *HVSocketConfig   `protobuf:"bytes,9,opt,name=hvsocket_config,json=hvsocketConfig,proto3" json:"hvsocket_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VMConfig) Reset() {
	*x = VMConfig{}
	mi := &file_openvmmservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMConfig) ProtoMessage() {}

func (x *VMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMConfig.ProtoReflect.Descriptor instead.
func (*VMConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{5}
}

func (x *VMConfig) GetMemoryConfig() *MemoryConfig {
	if x != nil {
		return x.MemoryConfig
	}
	return nil
}

func (x *VMConfig) GetProcessorConfig() *ProcessorConfig {
	if x != nil {
		return x.ProcessorConfig
	}
	return nil
}

func (x *VMConfig) GetDevicesConfig() *DevicesConfig {
	if x != nil {
		return x.DevicesConfig
	}
	return nil
}

func (x *VMConfig) GetSerialConfig() *SerialConfig {
	if x != nil {
		return x.SerialConfig
	}
	return nil
}

func (x *VMConfig) GetBootConfig() isVMConfig_BootConfig {
	if x != nil {
		return x.BootConfig
	}
	return nil
}

func (x *VMConfig) GetDirectBoot() *DirectBoot {
	if x != nil {
		if x, ok := x.BootConfig.(*VMConfig_DirectBoot); ok {
			return x.DirectBoot
		}
	}
	return nil
}

func (x *VMConfig) GetUefi() *UEFI {
	if x != nil {
		if x, ok := x.BootConfig.(*VMConfig_Uefi); ok {
			return x.Uefi
		}
	}
	return nil
}

func (x *VMConfig) GetWindowsOptions() *WindowsOptions {
	if x != nil {
		return x.WindowsOptions
	}
	return nil
}

func (x *VMConfig) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *VMConfig) GetHvsocketConfig() *HVSocketConfig {
	if x != nil {
		return x.HvsocketConfig
	}
	return nil
}

type isVMConfig_BootConfig interface {
	isVMConfig_BootConfig()
}

type VMConfig_DirectBoot struct {
	DirectBoot *DirectBoot `protobuf:"bytes,5,opt,name=direct_boot,json=directBoot,proto3,oneof"`
}

type VMConfig_Uefi struct {
	Uefi *UEFI `protobuf:"bytes,6,opt,name=uefi,proto3,oneof"`
}

func (*VMConfig_DirectBoot) isVMConfig_BootConfig() {}

func (*VMConfig_Uefi) isVMConfig_BootConfig() {}

// WindowsOptions contains virtual machine configurations that are only present on a Windows host.
type WindowsOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuGroupId    uint64                 `protobuf:"varint,1,opt,name=cpu_group_id,json=cpuGroupId,proto3" json:"cpu_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsOptions) Reset() {
	*x = WindowsOptions{}
	mi := &file_openvmmservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsOptions) ProtoMessage() {}

func (x *WindowsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsOptions.ProtoReflect.Descriptor instead.
func (*WindowsOptions) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{6}
}

func (x *WindowsOptions) GetCpuGroupId() uint64 {
	if x != nil {
		return x.CpuGroupId
	}
	return 0
}

type SerialConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ports         []*SerialConfig_Config `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerialConfig) Reset() {
	*x = SerialConfig{}
	mi := &file_openvmmservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialConfig) ProtoMessage() {}

func (x *SerialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialConfig.ProtoReflect.Descriptor instead.
func (*SerialConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{7}
}

func (x *SerialConfig) GetPorts() []*SerialConfig_Config {
	if x != nil {
		return x.Ports
	}
	return nil
}

type HVSocketConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HVSocketConfig) Reset() {
	*x = HVSocketConfig{}
	mi := &file_openvmmservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HVSocketConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HVSocketConfig) ProtoMessage() {}

func (x *HVSocketConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HVSocketConfig.ProtoReflect.Descriptor instead.
func (*HVSocketConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{8}
}

func (x *HVSocketConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CreateVMRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Config *VMConfig              `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Optional ID to be used by the VM service in log messages. It's up to the
	// server/virtstack to make use of this field. Useful for debugging to be able to
	// correlate events in the virtstack for a given vm that the client launched.
	LogId         string `protobuf:"bytes,2,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVMRequest) Reset() {
	*x = CreateVMRequest{}
	mi := &file_openvmmservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest) ProtoMessage() {}

func (x *CreateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest.ProtoReflect.Descriptor instead.
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVMRequest) GetConfig() *VMConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateVMRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

type MemoryStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	WorkingSetBytes uint64                 `protobuf:"varint,1,opt,name=working_set_bytes,json=workingSetBytes,proto3" json:"working_set_bytes,omitempty"`
	AvailableMemory uint64                 `protobuf:"varint,2,opt,name=available_memory,json=availableMemory,proto3" json:"available_memory,omitempty"`
	ReservedMemory  uint64                 `protobuf:"varint,3,opt,name=reserved_memory,json=reservedMemory,proto3" json:"reserved_memory,omitempty"`
	AssignedMemory  uint64                 `protobuf:"varint,4,opt,name=assigned_memory,json=assignedMemory,proto3" json:"assigned_memory,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MemoryStats) Reset() {
	*x = MemoryStats{}
	mi := &file_openvmmservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStats) ProtoMessage() {}

func (x *MemoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStats.ProtoReflect.Descriptor instead.
func (*MemoryStats) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{10}
}

func (x *MemoryStats) GetWorkingSetBytes() uint64 {
	if x != nil {
		return x.WorkingSetBytes
	}
	return 0
}

func (x *MemoryStats) GetAvailableMemory() uint64 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

func (x *MemoryStats) GetReservedMemory() uint64 {
	if x != nil {
		return x.ReservedMemory
	}
	return 0
}

func (x *MemoryStats) GetAssignedMemory() uint64 {
	if x != nil {
		return x.AssignedMemory
	}
	return 0
}

type ProcessorStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TotalRuntimeNs uint64                 `protobuf:"varint,1,opt,name=total_runtime_ns,json=totalRuntimeNs,proto3" json:"total_runtime_ns,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProcessorStats) Reset() {
	*x = ProcessorStats{}
	mi := &file_openvmmservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorStats) ProtoMessage() {}

func (x *ProcessorStats) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorStats.ProtoReflect.Descriptor instead.
func (*ProcessorStats) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{11}
}

func (x *ProcessorStats) GetTotalRuntimeNs() uint64 {
	if x != nil {
		return x.TotalRuntimeNs
	}
	return 0
}

type PropertiesVMRequest struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Types         []PropertiesVMRequest_PropertiesType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=openvmmservice.PropertiesVMRequest_PropertiesType" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PropertiesVMRequest) Reset() {
	*x = PropertiesVMRequest{}
	mi := &file_openvmmservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertiesVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesVMRequest) ProtoMessage() {}

func (x *PropertiesVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesVMRequest.ProtoReflect.Descriptor instead.
func (*PropertiesVMRequest) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{12}
}

func (x *PropertiesVMRequest) GetTypes() []PropertiesVMRequest_PropertiesType {
	if x != nil {
		return x.Types
	}
	return nil
}

type PropertiesVMResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MemoryStats    *MemoryStats           `protobuf:"bytes,1,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty"`
	ProcessorStats *ProcessorStats        `protobuf:"bytes,2,opt,name=processor_stats,json=processorStats,proto3" json:"processor_stats,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PropertiesVMResponse) Reset() {
	*x = PropertiesVMResponse{}
	mi := &file_openvmmservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertiesVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesVMResponse) ProtoMessage() {}

func (x *PropertiesVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesVMResponse.ProtoReflect.Descriptor instead.
func (*PropertiesVMResponse) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{13}
}

func (x *PropertiesVMResponse) GetMemoryStats() *MemoryStats {
	if x != nil {
		return x.MemoryStats
	}
	return nil
}

func (x *PropertiesVMResponse) GetProcessorStats() *ProcessorStats {
	if x != nil {
		return x.ProcessorStats
	}
	return nil
}

type CapabilitiesVMResponse struct {
	state              protoimpl.MessageState                      `protogen:"open.v1"`
	SupportedResources []*CapabilitiesVMResponse_SupportedResource `protobuf:"bytes,1,rep,name=supported_resources,json=supportedResources,proto3" json:"supported_resources,omitempty"`
	SupportedGuestOs   []CapabilitiesVMResponse_SupportedGuestOS   `protobuf:"varint,2,rep,packed,name=supported_guest_os,json=supportedGuestOs,proto3,enum=openvmmservice.CapabilitiesVMResponse_SupportedGuestOS" json:"supported_guest_os,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CapabilitiesVMResponse) Reset() {
	*x = CapabilitiesVMResponse{}
	mi := &file_openvmmservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilitiesVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesVMResponse) ProtoMessage() {}

func (x *CapabilitiesVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesVMResponse.ProtoReflect.Descriptor instead.
func (*CapabilitiesVMResponse) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{14}
}

func (x *CapabilitiesVMResponse) GetSupportedResources() []*CapabilitiesVMResponse_SupportedResource {
	if x != nil {
		return x.SupportedResources
	}
	return nil
}

func (x *CapabilitiesVMResponse) GetSupportedGuestOs() []CapabilitiesVMResponse_SupportedGuestOS {
	if x != nil {
		return x.SupportedGuestOs
	}
	return nil
}

type SCSIDisk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Controller    uint32                 `protobuf:"varint,1,opt,name=controller,proto3" json:"controller,omitempty"`
	Lun           uint32                 `protobuf:"varint,2,opt,name=lun,proto3" json:"lun,omitempty"`
	HostPath      string                 `protobuf:"bytes,3,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	Type          DiskType               `protobuf:"varint,4,opt,name=type,proto3,enum=openvmmservice.DiskType" json:"type,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,5,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCSIDisk) Reset() {
	*x = SCSIDisk{}
	mi := &file_openvmmservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCSIDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSIDisk) ProtoMessage() {}

func (x *SCSIDisk) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSIDisk.ProtoReflect.Descriptor instead.
func (*SCSIDisk) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{15}
}

func (x *SCSIDisk) GetController() uint32 {
	if x != nil {
		return x.Controller
	}
	return 0
}

func (x *SCSIDisk) GetLun() uint32 {
	if x != nil {
		return x.Lun
	}
	return 0
}

func (x *SCSIDisk) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *SCSIDisk) GetType() DiskType {
	if x != nil {
		return x.Type
	}
	return DiskType_SCSI_DISK_TYPE_VHD1
}

func (x *SCSIDisk) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type VPMEMDisk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostPath      string                 `protobuf:"bytes,1,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	Type          DiskType               `protobuf:"varint,2,opt,name=type,proto3,enum=openvmmservice.DiskType" json:"type,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPMEMDisk) Reset() {
	*x = VPMEMDisk{}
	mi := &file_openvmmservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPMEMDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPMEMDisk) ProtoMessage() {}

func (x *VPMEMDisk) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPMEMDisk.ProtoReflect.Descriptor instead.
func (*VPMEMDisk) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{16}
}

func (x *VPMEMDisk) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *VPMEMDisk) GetType() DiskType {
	if x != nil {
		return x.Type
	}
	return DiskType_SCSI_DISK_TYPE_VHD1
}

func (x *VPMEMDisk) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type NICConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NicId          string                 `protobuf:"bytes,1,opt,name=nic_id,json=nicId,proto3" json:"nic_id,omitempty"`                              // GUID
	MacAddress     string                 `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`               // 12-34-56-78-9A-BC
	LegacySwitchId string                 `protobuf:"bytes,4,opt,name=legacy_switch_id,json=legacySwitchId,proto3" json:"legacy_switch_id,omitempty"` // GUID, used only with legacy_port_id below
	// Optional friendly name for the adapter. Might be useful to show up in logs.
	NicName string `protobuf:"bytes,5,opt,name=nic_name,json=nicName,proto3" json:"nic_name,omitempty"`
	// Types that are valid to be assigned to Backend:
	//
	//	*NICConfig_LegacyPortId
	//	*NICConfig_Dio
	//	*NICConfig_Tap
	Backend       isNICConfig_Backend `protobuf_oneof:"backend"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NICConfig) Reset() {
	*x = NICConfig{}
	mi := &file_openvmmservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NICConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICConfig) ProtoMessage() {}

func (x *NICConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICConfig.ProtoReflect.Descriptor instead.
func (*NICConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{17}
}

func (x *NICConfig) GetNicId() string {
	if x != nil {
		return x.NicId
	}
	return ""
}

func (x *NICConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NICConfig) GetLegacySwitchId() string {
	if x != nil {
		return x.LegacySwitchId
	}
	return ""
}

func (x *NICConfig) GetNicName() string {
	if x != nil {
		return x.NicName
	}
	return ""
}

func (x *NICConfig) GetBackend() isNICConfig_Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *NICConfig) GetLegacyPortId() string {
	if x != nil {
		if x, ok := x.Backend.(*NICConfig_LegacyPortId); ok {
			return x.LegacyPortId
		}
	}
	return ""
}

func (x *NICConfig) GetDio() *DioBackend {
	if x != nil {
		if x, ok := x.Backend.(*NICConfig_Dio); ok {
			return x.Dio
		}
	}
	return nil
}

func (x *NICConfig) GetTap() *TapBackend {
	if x != nil {
		if x, ok := x.Backend.(*NICConfig_Tap); ok {
			return x.Tap
		}
	}
	return nil
}

type isNICConfig_Backend interface {
	isNICConfig_Backend()
}

type NICConfig_LegacyPortId struct {
	LegacyPortId string `protobuf:"bytes,2,opt,name=legacy_port_id,json=legacyPortId,proto3,oneof"` // legacy, GUID, Windows only
}

type NICConfig_Dio struct {
	Dio *DioBackend `protobuf:"bytes,6,opt,name=dio,proto3,oneof"`
}

type NICConfig_Tap struct {
	Tap *TapBackend `protobuf:"bytes,7,opt,name=tap,proto3,oneof"`
}

func (*NICConfig_LegacyPortId) isNICConfig_Backend() {}

func (*NICConfig_Dio) isNICConfig_Backend() {}

func (*NICConfig_Tap) isNICConfig_Backend() {}

type DioBackend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SwitchId      string                 `protobuf:"bytes,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"` // GUID
	PortId        string                 `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`       // GUID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DioBackend) Reset() {
	*x = DioBackend{}
	mi := &file_openvmmservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DioBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DioBackend) ProtoMessage() {}

func (x *DioBackend) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DioBackend.ProtoReflect.Descriptor instead.
func (*DioBackend) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{18}
}

func (x *DioBackend) GetSwitchId() string {
	if x != nil {
		return x.SwitchId
	}
	return ""
}

func (x *DioBackend) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

type TapBackend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TapBackend) Reset() {
	*x = TapBackend{}
	mi := &file_openvmmservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TapBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapBackend) ProtoMessage() {}

func (x *TapBackend) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapBackend.ProtoReflect.Descriptor instead.
func (*TapBackend) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{19}
}

func (x *TapBackend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WindowsPCIDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// e.g. PCIP\\VEN_10DE&DEV_13F2&SUBSYS_115E10DE&REV_A1\\6&17F903&0&00400000
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsPCIDevice) Reset() {
	*x = WindowsPCIDevice{}
	mi := &file_openvmmservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsPCIDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsPCIDevice) ProtoMessage() {}

func (x *WindowsPCIDevice) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsPCIDevice.ProtoReflect.Descriptor instead.
func (*WindowsPCIDevice) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{20}
}

func (x *WindowsPCIDevice) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type VirtioFSConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           string                 `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	RootPath      string                 `protobuf:"bytes,2,opt,name=root_path,json=rootPath,proto3" json:"root_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtioFSConfig) Reset() {
	*x = VirtioFSConfig{}
	mi := &file_openvmmservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtioFSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioFSConfig) ProtoMessage() {}

func (x *VirtioFSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioFSConfig.ProtoReflect.Descriptor instead.
func (*VirtioFSConfig) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{21}
}

func (x *VirtioFSConfig) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VirtioFSConfig) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

type ModifyMemoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryMb      uint64                 `protobuf:"varint,1,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyMemoryRequest) Reset() {
	*x = ModifyMemoryRequest{}
	mi := &file_openvmmservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMemoryRequest) ProtoMessage() {}

func (x *ModifyMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMemoryRequest.ProtoReflect.Descriptor instead.
func (*ModifyMemoryRequest) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{22}
}

func (x *ModifyMemoryRequest) GetMemoryMb() uint64 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

type ModifyProcessorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index of the processor to add/remove
	ProcessorIndex uint32 `protobuf:"varint,1,opt,name=processor_index,json=processorIndex,proto3" json:"processor_index,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ModifyProcessorRequest) Reset() {
	*x = ModifyProcessorRequest{}
	mi := &file_openvmmservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyProcessorRequest) ProtoMessage() {}

func (x *ModifyProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyProcessorRequest.ProtoReflect.Descriptor instead.
func (*ModifyProcessorRequest) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{23}
}

func (x *ModifyProcessorRequest) GetProcessorIndex() uint32 {
	if x != nil {
		return x.ProcessorIndex
	}
	return 0
}

type ModifyProcessorConfigRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProcessorWeight uint32                 `protobuf:"varint,1,opt,name=processor_weight,json=processorWeight,proto3" json:"processor_weight,omitempty"`
	ProcessorLimit  uint32                 `protobuf:"varint,2,opt,name=processor_limit,json=processorLimit,proto3" json:"processor_limit,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ModifyProcessorConfigRequest) Reset() {
	*x = ModifyProcessorConfigRequest{}
	mi := &file_openvmmservice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyProcessorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyProcessorConfigRequest) ProtoMessage() {}

func (x *ModifyProcessorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyProcessorConfigRequest.ProtoReflect.Descriptor instead.
func (*ModifyProcessorConfigRequest) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{24}
}

func (x *ModifyProcessorConfigRequest) GetProcessorWeight() uint32 {
	if x != nil {
		return x.ProcessorWeight
	}
	return 0
}

func (x *ModifyProcessorConfigRequest) GetProcessorLimit() uint32 {
	if x != nil {
		return x.ProcessorLimit
	}
	return 0
}

type ModifyResourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  ModifyType             `protobuf:"varint,1,opt,name=type,proto3,enum=openvmmservice.ModifyType" json:"type,omitempty"`
	// Types that are valid to be assigned to Resource:
	//
	//	*ModifyResourceRequest_Processor
	//	*ModifyResourceRequest_ProcessorConfig
	//	*ModifyResourceRequest_Memory
	//	*ModifyResourceRequest_ScsiDisk
	//	*ModifyResourceRequest_VpmemDisk
	//	*ModifyResourceRequest_NicConfig
	//	*ModifyResourceRequest_WindowsDevice
	Resource      isModifyResourceRequest_Resource `protobuf_oneof:"resource"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyResourceRequest) Reset() {
	*x = ModifyResourceRequest{}
	mi := &file_openvmmservice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyResourceRequest) ProtoMessage() {}

func (x *ModifyResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyResourceRequest.ProtoReflect.Descriptor instead.
func (*ModifyResourceRequest) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{25}
}

func (x *ModifyResourceRequest) GetType() ModifyType {
	if x != nil {
		return x.Type
	}
	return ModifyType_ADD
}

func (x *ModifyResourceRequest) GetResource() isModifyResourceRequest_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ModifyResourceRequest) GetProcessor() *ModifyProcessorRequest {
	if x != nil {
		if x, ok := x.Resource.(*ModifyResourceRequest_Processor); ok {
			return x.Processor
		}
	}
	return nil
}

func (x *ModifyResourceRequest) GetProcessorConfig() *ModifyProcessorConfigRequest {
	if x != nil {
		if x, ok := x.Resource.(*ModifyResourceRequest_ProcessorConfig); ok {
			return x.ProcessorConfig
		}
	}
	return nil
}

func (x *ModifyResourceRequest) GetMemory() *ModifyMemoryRequest {
	if x != nil {
		if x, ok := x.Resource.(*ModifyResourceRequest_Memory); ok {
			return x.Memory
		}
	}
	return nil
}

func (x *ModifyResourceRequest) GetScsiDisk() *SCSIDisk {
	if x != nil {
		if x, ok := x.Resource.(*ModifyResourceRequest_ScsiDisk); ok {
			return x.ScsiDisk
		}
	}
	return nil
}

func (x *ModifyResourceRequest) GetVpmemDisk() *VPMEMDisk {
	if x != nil {
		if x, ok := x.Resource.(*ModifyResourceRequest_VpmemDisk); ok {
			return x.VpmemDisk
		}
	}
	return nil
}

func (x *ModifyResourceRequest) GetNicConfig() *NICConfig {
	if x != nil {
		if x, ok := x.Resource.(*ModifyResourceRequest_NicConfig); ok {
			return x.NicConfig
		}
	}
	return nil
}

func (x *ModifyResourceRequest) GetWindowsDevice() *WindowsPCIDevice {
	if x != nil {
		if x, ok := x.Resource.(*ModifyResourceRequest_WindowsDevice); ok {
			return x.WindowsDevice
		}
	}
	return nil
}

type isModifyResourceRequest_Resource interface {
	isModifyResourceRequest_Resource()
}

type ModifyResourceRequest_Processor struct {
	Processor *ModifyProcessorRequest `protobuf:"bytes,2,opt,name=processor,proto3,oneof"`
}

type ModifyResourceRequest_ProcessorConfig struct {
	ProcessorConfig *ModifyProcessorConfigRequest `protobuf:"bytes,3,opt,name=processor_config,json=processorConfig,proto3,oneof"`
}

type ModifyResourceRequest_Memory struct {
	Memory *ModifyMemoryRequest `protobuf:"bytes,4,opt,name=memory,proto3,oneof"`
}

type ModifyResourceRequest_ScsiDisk struct {
	ScsiDisk *SCSIDisk `protobuf:"bytes,5,opt,name=scsi_disk,json=scsiDisk,proto3,oneof"`
}

type ModifyResourceRequest_VpmemDisk struct {
	VpmemDisk *VPMEMDisk `protobuf:"bytes,6,opt,name=vpmem_disk,json=vpmemDisk,proto3,oneof"`
}

type ModifyResourceRequest_NicConfig struct {
	NicConfig *NICConfig `protobuf:"bytes,7,opt,name=nic_config,json=nicConfig,proto3,oneof"`
}

type ModifyResourceRequest_WindowsDevice struct {
	WindowsDevice *WindowsPCIDevice `protobuf:"bytes,8,opt,name=windows_device,json=windowsDevice,proto3,oneof"`
}

func (*ModifyResourceRequest_Processor) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_ProcessorConfig) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_Memory) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_ScsiDisk) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_VpmemDisk) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_NicConfig) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_WindowsDevice) isModifyResourceRequest_Resource() {}

type SerialConfig_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Port  uint32                 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Uds to relay serial console output to.
	SocketPath    string `protobuf:"bytes,2,opt,name=socket_path,json=socketPath,proto3" json:"socket_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerialConfig_Config) Reset() {
	*x = SerialConfig_Config{}
	mi := &file_openvmmservice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerialConfig_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialConfig_Config) ProtoMessage() {}

func (x *SerialConfig_Config) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialConfig_Config.ProtoReflect.Descriptor instead.
func (*SerialConfig_Config) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SerialConfig_Config) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SerialConfig_Config) GetSocketPath() string {
	if x != nil {
		return x.SocketPath
	}
	return ""
}

type CapabilitiesVMResponse_SupportedResource struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Add           bool                            `protobuf:"varint,1,opt,name=Add,proto3" json:"Add,omitempty"`
	Remove        bool                            `protobuf:"varint,2,opt,name=Remove,proto3" json:"Remove,omitempty"`
	Update        bool                            `protobuf:"varint,3,opt,name=Update,proto3" json:"Update,omitempty"`
	Resource      CapabilitiesVMResponse_Resource `protobuf:"varint,4,opt,name=resource,proto3,enum=openvmmservice.CapabilitiesVMResponse_Resource" json:"resource,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilitiesVMResponse_SupportedResource) Reset() {
	*x = CapabilitiesVMResponse_SupportedResource{}
	mi := &file_openvmmservice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilitiesVMResponse_SupportedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesVMResponse_SupportedResource) ProtoMessage() {}

func (x *CapabilitiesVMResponse_SupportedResource) ProtoReflect() protoreflect.Message {
	mi := &file_openvmmservice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesVMResponse_SupportedResource.ProtoReflect.Descriptor instead.
func (*CapabilitiesVMResponse_SupportedResource) Descriptor() ([]byte, []int) {
	return file_openvmmservice_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CapabilitiesVMResponse_SupportedResource) GetAdd() bool {
	if x != nil {
		return x.Add
	}
	return false
}

func (x *CapabilitiesVMResponse_SupportedResource) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

func (x *CapabilitiesVMResponse_SupportedResource) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *CapabilitiesVMResponse_SupportedResource) GetResource() CapabilitiesVMResponse_Resource {
	if x != nil {
		return x.Resource
	}
	return CapabilitiesVMResponse_Vpmem
}

var File_openvmmservice_proto protoreflect.FileDescriptor

const file_openvmmservice_proto_rawDesc = "" +
	"\n" +
	"\x14openvmmservice.proto\x12\x0eopenvmmservice\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoogle/protobuf/struct.proto\"u\n" +
	"\n" +
	"DirectBoot\x12\x1f\n" +
	"\vkernel_path\x18\x01 \x01(\tR\n" +
	"kernelPath\x12\x1f\n" +
	"\vinitrd_path\x18\x02 \x01(\tR\n" +
	"initrdPath\x12%\n" +
	"\x0ekernel_cmdline\x18\x03 \x01(\tR\rkernelCmdline\"q\n" +
	"\x04UEFI\x12#\n" +
	"\rfirmware_path\x18\x01 \x01(\tR\ffirmwarePath\x12\x1f\n" +
	"\vdevice_path\x18\x02 \x01(\tR\n" +
	"devicePath\x12#\n" +
	"\roptional_data\x18\x03 \x01(\tR\foptionalData\"\xed\x02\n" +
	"\fMemoryConfig\x12\x1b\n" +
	"\tmemory_mb\x18\x01 \x01(\x04R\bmemoryMb\x12)\n" +
	"\x10allow_overcommit\x18\x02 \x01(\bR\x0fallowOvercommit\x12'\n" +
	"\x0fdeferred_commit\x18\x03 \x01(\bR\x0edeferredCommit\x12\x19\n" +
	"\bhot_hint\x18\x04 \x01(\bR\ahotHint\x12\x1b\n" +
	"\tcold_hint\x18\x05 \x01(\bR\bcoldHint\x12*\n" +
	"\x11cold_discard_hint\x18\x06 \x01(\bR\x0fcoldDiscardHint\x12*\n" +
	"\x12low_mmio_gap_in_mb\x18\a \x01(\x04R\x0elowMmioGapInMb\x12.\n" +
	"\x14high_mmio_base_in_mb\x18\b \x01(\x04R\x10highMmioBaseInMb\x12,\n" +
	"\x13high_mmio_gap_in_mb\x18\t \x01(\x04R\x0fhighMmioGapInMb\"\x8e\x01\n" +
	"\x0fProcessorConfig\x12'\n" +
	"\x0fprocessor_count\x18\x01 \x01(\rR\x0eprocessorCount\x12)\n" +
	"\x10processor_weight\x18\x02 \x01(\rR\x0fprocessorWeight\x12'\n" +
	"\x0fprocessor_limit\x18\x03 \x01(\rR\x0eprocessorLimit\"\xd0\x02\n" +
	"\rDevicesConfig\x127\n" +
	"\n" +
	"scsi_disks\x18\x01 \x03(\v2\x18.openvmmservice.SCSIDiskR\tscsiDisks\x12:\n" +
	"\vvpmem_disks\x18\x02 \x03(\v2\x19.openvmmservice.VPMEMDiskR\n" +
	"vpmemDisks\x128\n" +
	"\n" +
	"nic_config\x18\x03 \x03(\v2\x19.openvmmservice.NICConfigR\tnicConfig\x12G\n" +
	"\x0ewindows_device\x18\x04 \x03(\v2 .openvmmservice.WindowsPCIDeviceR\rwindowsDevice\x12G\n" +
	"\x0fvirtiofs_config\x18\x05 \x03(\v2\x1e.openvmmservice.VirtioFSConfigR\x0evirtiofsConfig\"\xb3\x05\n" +
	"\bVMConfig\x12A\n" +
	"\rmemory_config\x18\x01 \x01(\v2\x1c.openvmmservice.MemoryConfigR\fmemoryConfig\x12J\n" +
	"\x10processor_config\x18\x02 \x01(\v2\x1f.openvmmservice.ProcessorConfigR\x0fprocessorConfig\x12D\n" +
	"\x0edevices_config\x18\x03 \x01(\v2\x1d.openvmmservice.DevicesConfigR\rdevicesConfig\x12A\n" +
	"\rserial_config\x18\x04 \x01(\v2\x1c.openvmmservice.SerialConfigR\fserialConfig\x12=\n" +
	"\vdirect_boot\x18\x05 \x01(\v2\x1a.openvmmservice.DirectBootH\x00R\n" +
	"directBoot\x12*\n" +
	"\x04uefi\x18\x06 \x01(\v2\x14.openvmmservice.UEFIH\x00R\x04uefi\x12G\n" +
	"\x0fwindows_options\x18\a \x01(\v2\x1e.openvmmservice.WindowsOptionsR\x0ewindowsOptions\x12F\n" +
	"\n" +
	"extra_data\x18\b \x03(\v2'.openvmmservice.VMConfig.ExtraDataEntryR\textraData\x12G\n" +
	"\x0fhvsocket_config\x18\t \x01(\v2\x1e.openvmmservice.HVSocketConfigR\x0ehvsocketConfig\x1a<\n" +
	"\x0eExtraDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\f\n" +
	"\n" +
	"BootConfig\"2\n" +
	"\x0eWindowsOptions\x12 \n" +
	"\fcpu_group_id\x18\x01 \x01(\x04R\n" +
	"cpuGroupId\"\x88\x01\n" +
	"\fSerialConfig\x129\n" +
	"\x05ports\x18\x03 \x03(\v2#.openvmmservice.SerialConfig.ConfigR\x05ports\x1a=\n" +
	"\x06Config\x12\x12\n" +
	"\x04port\x18\x01 \x01(\rR\x04port\x12\x1f\n" +
	"\vsocket_path\x18\x02 \x01(\tR\n" +
	"socketPath\"$\n" +
	"\x0eHVSocketConfig\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"Z\n" +
	"\x0fCreateVMRequest\x120\n" +
	"\x06config\x18\x01 \x01(\v2\x18.openvmmservice.VMConfigR\x06config\x12\x15\n" +
	"\x06log_id\x18\x02 \x01(\tR\x05logId\"\xb6\x01\n" +
	"\vMemoryStats\x12*\n" +
	"\x11working_set_bytes\x18\x01 \x01(\x04R\x0fworkingSetBytes\x12)\n" +
	"\x10available_memory\x18\x02 \x01(\x04R\x0favailableMemory\x12'\n" +
	"\x0freserved_memory\x18\x03 \x01(\x04R\x0ereservedMemory\x12'\n" +
	"\x0fassigned_memory\x18\x04 \x01(\x04R\x0eassignedMemory\":\n" +
	"\x0eProcessorStats\x12(\n" +
	"\x10total_runtime_ns\x18\x01 \x01(\x04R\x0etotalRuntimeNs\"\x8c\x01\n" +
	"\x13PropertiesVMRequest\x12H\n" +
	"\x05types\x18\x01 \x03(\x0e22.openvmmservice.PropertiesVMRequest.PropertiesTypeR\x05types\"+\n" +
	"\x0ePropertiesType\x12\n" +
	"\n" +
	"\x06Memory\x10\x00\x12\r\n" +
	"\tProcessor\x10\x01\"\x9f\x01\n" +
	"\x14PropertiesVMResponse\x12>\n" +
	"\fmemory_stats\x18\x01 \x01(\v2\x1b.openvmmservice.MemoryStatsR\vmemoryStats\x12G\n" +
	"\x0fprocessor_stats\x18\x02 \x01(\v2\x1e.openvmmservice.ProcessorStatsR\x0eprocessorStats\"\x97\x04\n" +
	"\x16CapabilitiesVMResponse\x12i\n" +
	"\x13supported_resources\x18\x01 \x03(\v28.openvmmservice.CapabilitiesVMResponse.SupportedResourceR\x12supportedResources\x12e\n" +
	"\x12supported_guest_os\x18\x02 \x03(\x0e27.openvmmservice.CapabilitiesVMResponse.SupportedGuestOSR\x10supportedGuestOs\x1a\xa2\x01\n" +
	"\x11SupportedResource\x12\x10\n" +
	"\x03Add\x18\x01 \x01(\bR\x03Add\x12\x16\n" +
	"\x06Remove\x18\x02 \x01(\bR\x06Remove\x12\x16\n" +
	"\x06Update\x18\x03 \x01(\bR\x06Update\x12K\n" +
	"\bresource\x18\x04 \x01(\x0e2/.openvmmservice.CapabilitiesVMResponse.ResourceR\bresource\"Z\n" +
	"\bResource\x12\t\n" +
	"\x05Vpmem\x10\x00\x12\b\n" +
	"\x04Scsi\x10\x01\x12\b\n" +
	"\x04Vpci\x10\x02\x12\t\n" +
	"\x05Plan9\x10\x03\x12\t\n" +
	"\x05VMNic\x10\x04\x12\n" +
	"\n" +
	"\x06Memory\x10\x05\x12\r\n" +
	"\tProcessor\x10\x06\"*\n" +
	"\x10SupportedGuestOS\x12\v\n" +
	"\aWindows\x10\x00\x12\t\n" +
	"\x05Linux\x10\x01\"\xa4\x01\n" +
	"\bSCSIDisk\x12\x1e\n" +
	"\n" +
	"controller\x18\x01 \x01(\rR\n" +
	"controller\x12\x10\n" +
	"\x03lun\x18\x02 \x01(\rR\x03lun\x12\x1b\n" +
	"\thost_path\x18\x03 \x01(\tR\bhostPath\x12,\n" +
	"\x04type\x18\x04 \x01(\x0e2\x18.openvmmservice.DiskTypeR\x04type\x12\x1b\n" +
	"\tread_only\x18\x05 \x01(\bR\breadOnly\"s\n" +
	"\tVPMEMDisk\x12\x1b\n" +
	"\thost_path\x18\x01 \x01(\tR\bhostPath\x12,\n" +
	"\x04type\x18\x02 \x01(\x0e2\x18.openvmmservice.DiskTypeR\x04type\x12\x1b\n" +
	"\tread_only\x18\x03 \x01(\bR\breadOnly\"\x9b\x02\n" +
	"\tNICConfig\x12\x15\n" +
	"\x06nic_id\x18\x01 \x01(\tR\x05nicId\x12\x1f\n" +
	"\vmac_address\x18\x03 \x01(\tR\n" +
	"macAddress\x12(\n" +
	"\x10legacy_switch_id\x18\x04 \x01(\tR\x0elegacySwitchId\x12\x19\n" +
	"\bnic_name\x18\x05 \x01(\tR\anicName\x12&\n" +
	"\x0elegacy_port_id\x18\x02 \x01(\tH\x00R\flegacyPortId\x12.\n" +
	"\x03dio\x18\x06 \x01(\v2\x1a.openvmmservice.DioBackendH\x00R\x03dio\x12.\n" +
	"\x03tap\x18\a \x01(\v2\x1a.openvmmservice.TapBackendH\x00R\x03tapB\t\n" +
	"\abackend\"B\n" +
	"\n" +
	"DioBackend\x12\x1b\n" +
	"\tswitch_id\x18\x01 \x01(\tR\bswitchId\x12\x17\n" +
	"\aport_id\x18\x02 \x01(\tR\x06portId\" \n" +
	"\n" +
	"TapBackend\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"3\n" +
	"\x10WindowsPCIDevice\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"?\n" +
	"\x0eVirtioFSConfig\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12\x1b\n" +
	"\troot_path\x18\x02 \x01(\tR\brootPath\"2\n" +
	"\x13ModifyMemoryRequest\x12\x1b\n" +
	"\tmemory_mb\x18\x01 \x01(\x04R\bmemoryMb\"A\n" +
	"\x16ModifyProcessorRequest\x12'\n" +
	"\x0fprocessor_index\x18\x01 \x01(\rR\x0eprocessorIndex\"r\n" +
	"\x1cModifyProcessorConfigRequest\x12)\n" +
	"\x10processor_weight\x18\x01 \x01(\rR\x0fprocessorWeight\x12'\n" +
	"\x0fprocessor_limit\x18\x02 \x01(\rR\x0eprocessorLimit\"\xb1\x04\n" +
	"\x15ModifyResourceRequest\x12.\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1a.openvmmservice.ModifyTypeR\x04type\x12F\n" +
	"\tprocessor\x18\x02 \x01(\v2&.openvmmservice.ModifyProcessorRequestH\x00R\tprocessor\x12Y\n" +
	"\x10processor_config\x18\x03 \x01(\v2,.openvmmservice.ModifyProcessorConfigRequestH\x00R\x0fprocessorConfig\x12=\n" +
	"\x06memory\x18\x04 \x01(\v2#.openvmmservice.ModifyMemoryRequestH\x00R\x06memory\x127\n" +
	"\tscsi_disk\x18\x05 \x01(\v2\x18.openvmmservice.SCSIDiskH\x00R\bscsiDisk\x12:\n" +
	"\n" +
	"vpmem_disk\x18\x06 \x01(\v2\x19.openvmmservice.VPMEMDiskH\x00R\tvpmemDisk\x12:\n" +
	"\n" +
	"nic_config\x18\a \x01(\v2\x19.openvmmservice.NICConfigH\x00R\tnicConfig\x12I\n" +
	"\x0ewindows_device\x18\b \x01(\v2 .openvmmservice.WindowsPCIDeviceH\x00R\rwindowsDeviceB\n" +
	"\n" +
	"\bresource*-\n" +
	"\n" +
	"ModifyType\x12\a\n" +
	"\x03ADD\x10\x00\x12\n" +
	"\n" +
	"\x06REMOVE\x10\x01\x12\n" +
	"\n" +
	"\x06UPDATE\x10\x02*Y\n" +
	"\bDiskType\x12\x17\n" +
	"\x13SCSI_DISK_TYPE_VHD1\x10\x00\x12\x17\n" +
	"\x13SCSI_DISK_TYPE_VHDX\x10\x01\x12\x1b\n" +
	"\x17SCSI_DISK_TYPE_PHYSICAL\x10\x022\xee\x04\n" +
	"\x02VM\x12C\n" +
	"\bCreateVM\x12\x1f.openvmmservice.CreateVMRequest\x1a\x16.google.protobuf.Empty\x12<\n" +
	"\n" +
	"TeardownVM\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\x129\n" +
	"\aPauseVM\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\x12:\n" +
	"\bResumeVM\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\x128\n" +
	"\x06WaitVM\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\x12P\n" +
	"\x0eCapabilitiesVM\x12\x16.google.protobuf.Empty\x1a&.openvmmservice.CapabilitiesVMResponse\x12Y\n" +
	"\fPropertiesVM\x12#.openvmmservice.PropertiesVMRequest\x1a$.openvmmservice.PropertiesVMResponse\x12O\n" +
	"\x0eModifyResource\x12%.openvmmservice.ModifyResourceRequest\x1a\x16.google.protobuf.Empty\x126\n" +
	"\x04Quit\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.EmptyB\x12Z\x10./openvmmserviceb\x06proto3"

var (
	file_openvmmservice_proto_rawDescOnce sync.Once
	file_openvmmservice_proto_rawDescData []byte
)

func file_openvmmservice_proto_rawDescGZIP() []byte {
	file_openvmmservice_proto_rawDescOnce.Do(func() {
		file_openvmmservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_openvmmservice_proto_rawDesc), len(file_openvmmservice_proto_rawDesc)))
	})
	return file_openvmmservice_proto_rawDescData
}

var file_openvmmservice_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_openvmmservice_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_openvmmservice_proto_goTypes = []any{
	(ModifyType)(0),                                  // 0: openvmmservice.ModifyType
	(DiskType)(0),                                    // 1: openvmmservice.DiskType
	(PropertiesVMRequest_PropertiesType)(0),          // 2: openvmmservice.PropertiesVMRequest.PropertiesType
	(CapabilitiesVMResponse_Resource)(0),             // 3: openvmmservice.CapabilitiesVMResponse.Resource
	(CapabilitiesVMResponse_SupportedGuestOS)(0),     // 4: openvmmservice.CapabilitiesVMResponse.SupportedGuestOS
	(*DirectBoot)(nil),                               // 5: openvmmservice.DirectBoot
	(*UEFI)(nil),                                     // 6: openvmmservice.UEFI
	(*MemoryConfig)(nil),                             // 7: openvmmservice.MemoryConfig
	(*ProcessorConfig)(nil),                          // 8: openvmmservice.ProcessorConfig
	(*DevicesConfig)(nil),                            // 9: openvmmservice.DevicesConfig
	(*VMConfig)(nil),                                 // 10: openvmmservice.VMConfig
	(*WindowsOptions)(nil),                           // 11: openvmmservice.WindowsOptions
	(*SerialConfig)(nil),                             // 12: openvmmservice.SerialConfig
	(*HVSocketConfig)(nil),                           // 13: openvmmservice.HVSocketConfig
	(*CreateVMRequest)(nil),                          // 14: openvmmservice.CreateVMRequest
	(*MemoryStats)(nil),                              // 15: openvmmservice.MemoryStats
	(*ProcessorStats)(nil),                           // 16: openvmmservice.ProcessorStats
	(*PropertiesVMRequest)(nil),                      // 17: openvmmservice.PropertiesVMRequest
	(*PropertiesVMResponse)(nil),                     // 18: openvmmservice.PropertiesVMResponse
	(*CapabilitiesVMResponse)(nil),                   // 19: openvmmservice.CapabilitiesVMResponse
	(*SCSIDisk)(nil),                                 // 20: openvmmservice.SCSIDisk
	(*VPMEMDisk)(nil),                                // 21: openvmmservice.VPMEMDisk
	(*NICConfig)(nil),                                // 22: openvmmservice.NICConfig
	(*DioBackend)(nil),                               // 23: openvmmservice.DioBackend
	(*TapBackend)(nil),                               // 24: openvmmservice.TapBackend
	(*WindowsPCIDevice)(nil),                         // 25: openvmmservice.WindowsPCIDevice
	(*VirtioFSConfig)(nil),                           // 26: openvmmservice.VirtioFSConfig
	(*ModifyMemoryRequest)(nil),                      // 27: openvmmservice.ModifyMemoryRequest
	(*ModifyProcessorRequest)(nil),                   // 28: openvmmservice.ModifyProcessorRequest
	(*ModifyProcessorConfigRequest)(nil),             // 29: openvmmservice.ModifyProcessorConfigRequest
	(*ModifyResourceRequest)(nil),                    // 30: openvmmservice.ModifyResourceRequest
	nil,                                              // 31: openvmmservice.VMConfig.ExtraDataEntry
	(*SerialConfig_Config)(nil),                      // 32: openvmmservice.SerialConfig.Config
	(*CapabilitiesVMResponse_SupportedResource)(nil), // 33: openvmmservice.CapabilitiesVMResponse.SupportedResource
	(*emptypb.Empty)(nil),                            // 34: google.protobuf.Empty
}
var file_openvmmservice_proto_depIdxs = []int32{
	20, // 0: openvmmservice.DevicesConfig.scsi_disks:type_name -> openvmmservice.SCSIDisk
	21, // 1: openvmmservice.DevicesConfig.vpmem_disks:type_name -> openvmmservice.VPMEMDisk
	22, // 2: openvmmservice.DevicesConfig.nic_config:type_name -> openvmmservice.NICConfig
	25, // 3: openvmmservice.DevicesConfig.windows_device:type_name -> openvmmservice.WindowsPCIDevice
	26, // 4: openvmmservice.DevicesConfig.virtiofs_config:type_name -> openvmmservice.VirtioFSConfig
	7,  // 5: openvmmservice.VMConfig.memory_config:type_name -> openvmmservice.MemoryConfig
	8,  // 6: openvmmservice.VMConfig.processor_config:type_name -> openvmmservice.ProcessorConfig
	9,  // 7: openvmmservice.VMConfig.devices_config:type_name -> openvmmservice.DevicesConfig
	12, // 8: openvmmservice.VMConfig.serial_config:type_name -> openvmmservice.SerialConfig
	5,  // 9: openvmmservice.VMConfig.direct_boot:type_name -> openvmmservice.DirectBoot
	6,  // 10: openvmmservice.VMConfig.uefi:type_name -> openvmmservice.UEFI
	11, // 11: openvmmservice.VMConfig.windows_options:type_name -> openvmmservice.WindowsOptions
	31, // 12: openvmmservice.VMConfig.extra_data:type_name -> openvmmservice.VMConfig.ExtraDataEntry
	13, // 13: openvmmservice.VMConfig.hvsocket_config:type_name -> openvmmservice.HVSocketConfig
	32, // 14: openvmmservice.SerialConfig.ports:type_name -> openvmmservice.SerialConfig.Config
	10, // 15: openvmmservice.CreateVMRequest.config:type_name -> openvmmservice.VMConfig
	2,  // 16: openvmmservice.PropertiesVMRequest.types:type_name -> openvmmservice.PropertiesVMRequest.PropertiesType
	15, // 17: openvmmservice.PropertiesVMResponse.memory_stats:type_name -> openvmmservice.MemoryStats
	16, // 18: openvmmservice.PropertiesVMResponse.processor_stats:type_name -> openvmmservice.ProcessorStats
	33, // 19: openvmmservice.CapabilitiesVMResponse.supported_resources:type_name -> openvmmservice.CapabilitiesVMResponse.SupportedResource
	4,  // 20: openvmmservice.CapabilitiesVMResponse.supported_guest_os:type_name -> openvmmservice.CapabilitiesVMResponse.SupportedGuestOS
	1,  // 21: openvmmservice.SCSIDisk.type:type_name -> openvmmservice.DiskType
	1,  // 22: openvmmservice.VPMEMDisk.type:type_name -> openvmmservice.DiskType
	23, // 23: openvmmservice.NICConfig.dio:type_name -> openvmmservice.DioBackend
	24, // 24: openvmmservice.NICConfig.tap:type_name -> openvmmservice.TapBackend
	0,  // 25: openvmmservice.ModifyResourceRequest.type:type_name -> openvmmservice.ModifyType
	28, // 26: openvmmservice.ModifyResourceRequest.processor:type_name -> openvmmservice.ModifyProcessorRequest
	29, // 27: openvmmservice.ModifyResourceRequest.processor_config:type_name -> openvmmservice.ModifyProcessorConfigRequest
	27, // 28: openvmmservice.ModifyResourceRequest.memory:type_name -> openvmmservice.ModifyMemoryRequest
	20, // 29: openvmmservice.ModifyResourceRequest.scsi_disk:type_name -> openvmmservice.SCSIDisk
	21, // 30: openvmmservice.ModifyResourceRequest.vpmem_disk:type_name -> openvmmservice.VPMEMDisk
	22, // 31: openvmmservice.ModifyResourceRequest.nic_config:type_name -> openvmmservice.NICConfig
	25, // 32: openvmmservice.ModifyResourceRequest.windows_device:type_name -> openvmmservice.WindowsPCIDevice
	3,  // 33: openvmmservice.CapabilitiesVMResponse.SupportedResource.resource:type_name -> openvmmservice.CapabilitiesVMResponse.Resource
	14, // 34: openvmmservice.VM.CreateVM:input_type -> openvmmservice.CreateVMRequest
	34, // 35: openvmmservice.VM.TeardownVM:input_type -> google.protobuf.Empty
	34, // 36: openvmmservice.VM.PauseVM:input_type -> google.protobuf.Empty
	34, // 37: openvmmservice.VM.ResumeVM:input_type -> google.protobuf.Empty
	34, // 38: openvmmservice.VM.WaitVM:input_type -> google.protobuf.Empty
	34, // 39: openvmmservice.VM.CapabilitiesVM:input_type -> google.protobuf.Empty
	17, // 40: openvmmservice.VM.PropertiesVM:input_type -> openvmmservice.PropertiesVMRequest
	30, // 41: openvmmservice.VM.ModifyResource:input_type -> openvmmservice.ModifyResourceRequest
	34, // 42: openvmmservice.VM.Quit:input_type -> google.protobuf.Empty
	34, // 43: openvmmservice.VM.CreateVM:output_type -> google.protobuf.Empty
	34, // 44: openvmmservice.VM.TeardownVM:output_type -> google.protobuf.Empty
	34, // 45: openvmmservice.VM.PauseVM:output_type -> google.protobuf.Empty
	34, // 46: openvmmservice.VM.ResumeVM:output_type -> google.protobuf.Empty
	34, // 47: openvmmservice.VM.WaitVM:output_type -> google.protobuf.Empty
	19, // 48: openvmmservice.VM.CapabilitiesVM:output_type -> openvmmservice.CapabilitiesVMResponse
	18, // 49: openvmmservice.VM.PropertiesVM:output_type -> openvmmservice.PropertiesVMResponse
	34, // 50: openvmmservice.VM.ModifyResource:output_type -> google.protobuf.Empty
	34, // 51: openvmmservice.VM.Quit:output_type -> google.protobuf.Empty
	43, // [43:52] is the sub-list for method output_type
	34, // [34:43] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_openvmmservice_proto_init() }
func file_openvmmservice_proto_init() {
	if File_openvmmservice_proto != nil {
		return
	}
	file_openvmmservice_proto_msgTypes[5].OneofWrappers = []any{
		(*VMConfig_DirectBoot)(nil),
		(*VMConfig_Uefi)(nil),
	}
	file_openvmmservice_proto_msgTypes[17].OneofWrappers = []any{
		(*NICConfig_LegacyPortId)(nil),
		(*NICConfig_Dio)(nil),
		(*NICConfig_Tap)(nil),
	}
	file_openvmmservice_proto_msgTypes[25].OneofWrappers = []any{
		(*ModifyResourceRequest_Processor)(nil),
		(*ModifyResourceRequest_ProcessorConfig)(nil),
		(*ModifyResourceRequest_Memory)(nil),
		(*ModifyResourceRequest_ScsiDisk)(nil),
		(*ModifyResourceRequest_VpmemDisk)(nil),
		(*ModifyResourceRequest_NicConfig)(nil),
		(*ModifyResourceRequest_WindowsDevice)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_openvmmservice_proto_rawDesc), len(file_openvmmservice_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openvmmservice_proto_goTypes,
		DependencyIndexes: file_openvmmservice_proto_depIdxs,
		EnumInfos:         file_openvmmservice_proto_enumTypes,
		MessageInfos:      file_openvmmservice_proto_msgTypes,
	}.Build()
	File_openvmmservice_proto = out.File
	file_openvmmservice_proto_goTypes = nil
	file_openvmmservice_proto_depIdxs = nil
}
